generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile      UserProfile?
  progress     UserProgress[]
  quizAttempts UserQuizAttempt[]
  transactions CoinTransaction[]
  badges       UserBadge[]
  streaks      UserStreak?

  @@map("users")
}

model UserProfile {
  userId      Int        @id @map("user_id")
  rank        Int        @default(1)
  points      Int        @default(0)
  coinsEarned Int        @default(0)
  coinsSpent  Int        @default(0)
  theme       ThemeName? @default(DEFAULT) // Fixed enum default
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user         User              @relation(fields: [userId], references: [id])
  transactions CoinTransaction[]
  Theme        Theme[]

  @@map("users_profile")
}

model Tutorial {
  id Int @id @default(autoincrement())

  title        String
  description  String?
  content      String
  isLocked     Boolean  @default(true)
  unlockPoints Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  quizzes  Quiz[]
  progress UserProgress[]

  @@map("tutorials")
}

model Quiz {
  id        Int      @id @default(autoincrement())
  title     String
  isTimed   Boolean  @default(false)
  timeLimit Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions           QuizQuestion[]
  attempts            UserQuizAttempt[]
  Tutorial            Tutorial?             @relation(fields: [tutorialId], references: [id])
  tutorialId          Int?
  questionAttempts UserQuestionAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id            Int      @id @default(autoincrement())
  quizId        Int
  questionText  String
  options       String[] // Array of options (e.g., ["A", "B", "C", "D"])
  correctAnswer String   @default("") // Store correct answer as a string (e.g., "A")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  userId      Int
  tutorialId  Int
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  tutorial Tutorial @relation(fields: [tutorialId], references: [id])

  @@unique([userId, tutorialId])
  @@map("users_progress")
}

model UserQuizAttempt {
  id          Int       @id @default(autoincrement())
  userId      Int
  quizId      Int
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])

  questionAttempts UserQuestionAttempt[]

  @@index([userId])
  @@index([quizId])
  @@map("user_quiz_attempts")
}

model UserQuestionAttempt {
  id                Int      @id @default(autoincrement())
  userQuizAttemptId Int
  questionId        Int
  selectedOption    String
  isCorrect         Boolean
  pointsEarned      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  quizAttempts UserQuizAttempt @relation(fields: [userQuizAttemptId], references: [id])
  Quiz         Quiz?           @relation(fields: [quizId], references: [id])
  quizId       Int?

  @@map("user_question_attempts")
}

model CoinTransaction {
  id            Int             @id @default(autoincrement())
  userProfileId Int
  type          TransactionType
  amount        Int
  description   String
  transactionAt DateTime        @default(now())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  userProfile UserProfile @relation(fields: [userProfileId], references: [userId])
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?

  @@map("coins_transactions")
}

model Badge {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  pointsReq Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  badges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    Int
  badgeId   Int
  earnedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@map("users_badges")
}

model UserStreak {
  userId      Int       @id @map("user_id")
  streakCount Int       @default(0)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("users_streaks")
}

model Theme {
  id            Int      @id @default(autoincrement())
  userProfileId Int
  name          String   @default("Default")
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userProfile UserProfile @relation(fields: [userProfileId], references: [userId])

  @@map("themes")
}

enum TransactionType {
  EARNED
  SPENT
}

enum ThemeName {
  DEFAULT
  DARK
  LIGHT
}
