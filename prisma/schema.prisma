generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  firstName         String
  lastName          String?
  email             String    @unique
  passwordHash      String
  avatarUrl         String?
  role              String    @default("user") // Admin or User
  failedAttempts    Int       @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  emailVerified     Boolean   @default(false)
  verificationToken String?   @unique

  profile        UserProfile?
  progress       UserProgress[]
  quizAttempts   UserQuizAttempt[]
  badges         UserBadge[]
  streaks        UserStreak?
  RecentActivity RecentActivity[]

  @@map("users")
}

model UserProfile {
  userId    Int        @id @map("user_id")
  rank      Int        @default(1)
  points    Int        @default(0)
  coins     Int        @default(0)
  theme     ThemeName? @default(LIGHT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions CoinTransaction[]
  Theme        Theme[]

  @@map("users_profile")
}

model Tutorial {
  id             Int             @id @default(autoincrement())
  title          String
  description    String?
  content        String          @db.Text
  category       String?
  authorId       Int?
  likes          Int             @default(0)
  views          Int             @default(0)
  isLocked       Boolean         @default(true)
  cost           Int             @default(0)
  nextTutorialId Int?
  hasChallenge   Boolean         @default(false)
  difficulty     DifficultyLevel @default(EASY)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  quizzes  Quiz[]
  progress UserProgress[]

  @@map("tutorials")
}

model Quiz {
  id             Int             @id @default(autoincrement())
  title          String
  isTimed        Boolean         @default(false)
  timeLimit      Int?
  maxScore       Int             @default(100)
  passPercentage Int             @default(50)
  difficulty     DifficultyLevel @default(EASY)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  questions  QuizQuestion[]
  attempts   UserQuizAttempt[]
  tutorial   Tutorial?         @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  tutorialId Int?

  @@map("quizzes")
}

model QuizQuestion {
  id            Int      @id @default(autoincrement())
  quizId        Int
  questionText  String
  options       String[] // Array of options (e.g., ["A", "B", "C", "D"])
  correctAnswer String   @default("") // Store correct answer as a string (e.g., "A")
  points        Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model UserProgress {
  id                  Int       @id @default(autoincrement())
  isCompleted         Boolean   @default(false)
  completedAt         DateTime?
  attempts            Int       @default(0)
  bestScore           Int       @default(0)
  percentageCompleted Int       @default(0)
  interviewCompleted  Boolean   @default(false)
  challengeCompleted  Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId     Int
  tutorialId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutorial   Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("users_progress")
}

model UserQuizAttempt {
  id          Int       @id @default(autoincrement())
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId Int
  quizId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  questionAttempts UserQuestionAttempt[]

  @@index([userId])
  @@index([quizId])
  @@map("user_quiz_attempts")
}

model UserQuestionAttempt {
  id                Int      @id @default(autoincrement())
  userQuizAttemptId Int
  questionId        Int
  selectedOption    String
  isCorrect         Boolean
  pointsEarned      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  quizAttempts UserQuizAttempt @relation(fields: [userQuizAttemptId], references: [id], onDelete: Cascade)

  @@map("user_question_attempts")
}

model CoinTransaction {
  id            Int             @id @default(autoincrement())
  userProfileId Int
  type          TransactionType
  amount        Int
  description   String
  transactionAt DateTime        @default(now())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  userProfile UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)

  @@map("coins_transactions")
}

model Badge {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  pointsReq Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  badges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    Int
  badgeId   Int
  earnedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("users_badges")
}

model UserStreak {
  userId      Int       @id @map("user_id")
  streakCount Int       @default(0)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_streaks")
}

model Theme {
  id            Int      @id @default(autoincrement())
  userProfileId Int
  name          String   @default("Default")
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userProfile UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)

  @@map("themes")
}

model RecentActivity {
  id          String   @id @default(uuid())
  type        String
  referenceId Int?
  value       Int?
  description String?
  createdAt   DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("recent_activities")
}

enum TransactionType {
  ALL
  EARNED
  SPENT
}

enum ThemeName {
  DARK
  LIGHT
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}
